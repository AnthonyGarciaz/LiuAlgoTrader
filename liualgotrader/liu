#!/usr/bin/env python
import os
import sys
import pygit2
import pathlib
import requests
from liualgotrader.common import config
import os

def show_version():
    print(f"Liu Algo Trading Framework v{config.build_label}")


def show_usage():
    show_version()

    print()
    print(f"usgae: liu quickstart")
    print()

def setup_db(db_location: str, db_name : str, user_name : str, password : str):
    try:
        print()
        print("+---------------------+")
        print("| setting up database |")
        print("+---------------------+")

        p = pathlib.Path(db_location)
        if not p.exists():
            p.mkdir()
        if db_location[-1] != '/':
            db_location += '/'

        r = requests.get('https://raw.github.com/amor71/LiuAlgoTrader/master/database/docker-compose.yml')
        resolved = r.text.replace("{db_name}", db_name).replace("{user_name}", user_name).replace("{password}", password)

        with open(f"{db_location}docker-compose.yml", "w") as f:
            f.write(resolved)
            f.write("\n")

        base_url = 'https://raw.github.com/amor71/LiuAlgoTrader/master/database/'
        files = ["schema.sql", "postgres.conf"]

        for file in files:
            r = requests.get(f"{base_url}{file}")
            with open(f"{db_location}{file}", "w") as f:
                f.write(r.text)
                f.write("")
    except Exception as e:
        print(f"Something went wrong {e}, open a new issue w/ details 'https://github.com/amor71/LiuAlgoTrader/issues/new'")
        exit(0)

    print("files loaded successfully.")
    print(f"running docker-compose fromwith in {db_location}:")
    to_run = f"cd {db_location} && docker-compose up -d"
    print("> ", to_run)
    os.system(to_run)
    print()
    print("check deployment using `\psql -h localhost -p 5400 -U liu`")

def setup_samples(samples_location: str) -> None:
    try:
        print()
        print("+--------------------+")
        print("| setting up samples |")
        print("+--------------------+")

        p = pathlib.Path(samples_location)
        if not p.exists():
            p.mkdir()
        if db_location[-1] != '/':
            db_location += '/'

        base_url = 'https://raw.github.com/amor71/LiuAlgoTrader/master/examples/quickstart'
        files = ["tradeplan.toml", "vwap_short.py", "momentum_long_v3.py"]

        for file in files:
            print(f"Downloading {base_url}{file} to {samples_location}..."
            r = requests.get(f"{base_url}{file}")
            with open(f"{samples_location}{file}", "w") as f:
                f.write(r.text)
                f.write("")

    except Exception as e:
        print(f"Something went wrong {e}, open a new issue w/ details 'https://github.com/amor71/LiuAlgoTrader/issues/new'")
        exit(0)

def quickstart():
    print(f"Welcome to Lig Algo Trading Framework v{config.build_label}!")
    print()
    print("This wizard will guide you through the setup process.")
    print()
    print("+--------------------------------------+")
    print("| Step #1 - Alpaca.Markets credentials |")
    print("+--------------------------------------+")
    print()
    print("To use Liu Algo Trading Framework you need a funded Alpaca Markets account,")
    print("do you already have a funded account [Y]/n:")
    i = input()
    have_funded = (
        True if len(i) == 0 or (i == "y" or i == "Y" or i.lower() == "yes") else False
    )

    if not have_funded:
        print("For additional details `https://alpaca.markets/docs/about-us/`")
        return


    if not config.prod_api_key_id or not config.prod_api_secret:
        print(
            "Liu Algo Trading Framework uses Polygon.io data for both LIVE and PAPER trading."
        )
        print()
        print("The Framework expects two environment variables to be set:")
        print("`APCA_API_KEY_ID` and `APCA_API_SECRET_KEY` reflecting the funded")
        print("account's API key and secret respectively.")
        print("Please set the two environment and re-run the wizard.")
        return

    print()
    print("Do you plan on using the framework for PAPER or LIVE trading? [P]/L")
    i = input()
    use_paper = True if not len(i) or i.lower() in ('p', "paper") else False

    if use_paper:
        if not config.paper_api_key_id or not config.paper_api_secret:
            print("The Framework expects two environment variables to be set:")
            print("`ALPACA_PAPER_API_KEY` and `ALPACA_PAPER_API_SECRET` reflecting the paper")
            print("account's API key and secret respectively.")
            print("Please set the two environment and re-run the wizard.")
        else:
            print("GREAT! both keys are present. Good job.")

    print()
    print("+----------------------------------+")
    print("| Step #2 - Database configuration |")
    print("+----------------------------------+")
    print()
    print("Do you already have a PostgreSQL instance configured [N]/y:")
    i = input()
    already_have_db = (
        True if len(i) > 0 and (i == "y" or i == "Y" or i.lower() == "yes") else False
    )

    if already_have_db:
        print(
            "Follow the instructions at 'https://liualgotrader.readthedocs.io/en/latest/Installation%20&%20Setup.html#database-setup' to complete your database setup."
        )
    else:
        pwd = pathlib.Path().absolute()
        print("Liu Algo Trading Framework uses `docker-compose` to run a local database.")
        print("The installation will download the docker-compose.yml, database schema")
        print("and prepare the database for first time usage. You can stop and re-run")
        print("the database using `docker-compose up -d ` and `docker-compose down`")
        print("respectively. Your data will not be deleted. For more details RTFM.")
        print()
        print(f"Select location for database files [{pwd}/liu_data/]:")
        db_location = input()
        db_location = f"{pwd}/liu_data/" if not len(db_location) else db_location

        print("Select the database name for keeping track of your trading [liu]:")
        db_name = input()
        db_name = "liu" if not len(db_name) else db_name
        print("Select the database user-name [liu]:")
        user_name = input()
        user_name = "liu" if not len(user_name) else user_name
        print("Select the database password [liu]:")
        password = input()
        password = "liu" if not len(password) else password

    print()
    print("+--------------------+")
    print("| Step #3 - Examples |")
    print("+--------------------+")
    print()
    print("Would you like to download & view samples? [Y]/n:")
    i = input()
    samples = True if not len(i) or i.lower in ("y", "yes") else False
    if samples:
        pwd = pathlib.Path().absolute()
        print(f"Select location for sample files [{pwd}]:")
        sample_location = input()
        sample_location = pwd if not len(sample_location) else sample_location

    print()
    print("Ready to go?? Press [ENTER] to start the installation..")

    if not already_have_db:
        setup_db(db_location, db_name, user_name, password)
    if samples:
        setup_samples(sample_location)

if __name__ == "__main__":
    config.filename = os.path.basename(__file__)

    try:
        config.build_label = pygit2.Repository("../").describe(
            describe_strategy=pygit2.GIT_DESCRIBE_TAGS
        )
    except pygit2.GitError:
        import liualgotrader

        config.build_label = liualgotrader.__version__ if hasattr(liualgotrader, "__version__") else ""  # type: ignore

    if len(sys.argv) != 2:
        show_usage()
        exit(0)
    if sys.argv[1] == "quickstart":
        try:
            quickstart()
        except KeyboardInterrupt:
            print("Oops... exiting gracefully")
    else:
        show_usage()

    exit(0)
